export type Coords = number[]
export type Coords2D = [x: number, y: number]
export type Coords3D = [x: number, y: number, z: number]
export type Matrix = Coords[]

export type Converter = (x: unknown) => unknown

export interface FileMetadata
  /** The version of the FOLD spec that the file assumes.
   * **Strongly recommended**, in case we ever have to make
   * backward-incompatible changes.
   */
  file_spec?: number
  /** The software that created the file.
   * **Recommended** for files output by computer software;
   * less important for files made by hand.
   */
  file_creator?: string
  /** The human author. */
  file_author?: string
  /** A title for the entire file. */
  file_title?: string
  /** A description of the entire file. */
  file_description?: string
  /** A subjective interpretation about what the entire file represents. */
  file_classes?: Array<
    ('singleModel' | 'multiModel') | 'animation' | 'diagrams' | string
  >

export interface FrameMetadata
  /** The human author. */
  frame_author?: string
  /** A title for the frame. */
  frame_title?: string
  /** A description of the frame. */
  frame_description?: string
  /** A subjective interpretation about what the frame represents. */
  frame_classes?: Array<
    'creasePattern' | 'foldedForm' | 'graph' | 'linkage' | string
  >
  /** Attributes that objectively describe properties of the
   * folded structure being represented.
   */
  frame_attributes?: Array<
    | ('2D' | '3D')
    | 'abstract'
    | ('manifold' | 'nonManifold')
    | ('orientable' | 'nonOrientable')
    | ('selfTouching' | 'nonSelfTouching')
    | ('selfIntersecting' | 'nonSelfIntersecting')
    | ('cuts' | 'noCuts')
    | ('joins' | 'noJoins')
    | ('convexFaces' | 'nonConvexFaces')
    | string
  >
  /** Physical or logical unit that all coordinates are relative to. */
  frame_unit?:
    | 'unit'
    | 'in'
    | 'pt'
    | 'm'
    | 'cm'
    | 'mm'
    | 'um'
    | 'nm'
    | string

export interface RootFrame extends FrameMetadata
  /** For each vertex, an array of coordinates,
   * such as `[x, y, z]` or `[x, y]` (where `z` is implicitly zero).
   * In higher dimensions, all trailing unspecified coordinates are implicitly
   * zero.  **Recommended** except for frames with attribute `"abstract"`.
   */
  vertices_coords?: Coords[]
  /** For each vertex, an array of vertices (vertex IDs)
   * that are adjacent along edges.  If the frame represents an orientable
   * manifold or planar linkage, this list should be ordered counterclockwise
   * around the vertex (possibly repeating a vertex more than once).
   * If the frame is a nonorientable manifold, this list should be cyclically
   * ordered around the vertex (possibly repeating a vertex).
   * Otherwise, the order is arbitrary.
   * **Recommended** in any frame lacking `edges_vertices` property
   * (otherwise `vertices_vertices` can easily be computed from
   * `edges_vertices` as needed).
   */
  vertices_vertices?: number[][]
  /** For each vertex, an array of edge IDs for the edges
   * incident to the vertex.  If the frame represents an orientable manifold,
   * this list should be ordered counterclockwise around the vertex.
   * If the frame is a nonorientable manifold, this list should be cyclically
   * ordered around the vertex.
   * In all cases, the linear order should match `vertices_vertices` if both
   * are specified: `vertices_edges[v][i]` should be an edge connecting vertices
   * `v` and `vertices_vertices[v][i]`.
   */
  vertices_edges?: number[][]
  /** For each vertex, an array of face IDs for the faces
   * incident to the vertex, possibly including `null`s.
   * If the frame represents a manifold, `vertices_faces` should align with
   * `vertices_vertices` and/or `vertices_edges`:
   * `vertices_faces[v][i]` should be either
   *
   * * the face containing vertices
   *   `vertices_vertices[v][i]` and `vertices_vertices[v][(i+1)%d]` and
   *   containing edges `vertices_edges[v][i]` and `vertices_edges[v][(i+1)%d]`,
   *   where `d` is the degree of vertex `v`; or
   * * `null` if such a face doesn't exist.
   *
   * If the frame represents an orientable manifold,
   * this list should be ordered counterclockwise around the vertex
   * (possibly repeating a face more than once).  If the frame is a
   * nonorientable manifold, this list should be cyclically ordered around the
   * vertex (possibly repeating a vertex), and matching the cyclic order of
   * `vertices_vertices` and/or `vertices_edges` (if either is specified).
   */
  vertices_faces?: (number | null)[][]

  /** `edges_vertices`: For each edge, an array `[u, v]` of two vertex IDs for
   * the two endpoints of the edge.  This effectively defines the *orientation*
   * of the edge, from `u` to `v`.  (This orientation choice is arbitrary,
   * but is used to define the ordering of `edges_faces`.)
   * **Recommended** in frames having any `edges_...` property
   * (e.g., to represent mountain-valley assignment).
   */
  edges_vertices?: [u: number, v: number][]
  /** For each edge, an array of face IDs for the faces incident
   * to the edge, possibly including `null`s.
   * For nonmanifolds in particular, the (nonnull) faces should be listed in
   * counterclockwise order around the edge,
   * relative to the orientation of the edge.
   * For manifolds, the array for each edge should be an array of length 2,
   * where the first entry is the face locally to the "left" of the edge
   * (or `null` if there is no such face) and the second entry is the face
   * locally to the "right" of the edge (or `null` if there is no such face);
   * for orientable manifolds, "left" and "right" must be consistent with the
   * manifold orientation given by the counterclockwise orientation of faces.
   * However, a boundary edge may also be represented by a length-1 array, with
   * the `null` omitted, to be consistent with the nonmanifold representation.
   */
  edges_faces?: (number | null)[][]
  /** For each edge, a string representing its fold direction assignment:
   * * `"B"`: border/boundary edge (only one incident face)
   * * `"M"`: mountain crease
   * * `"V"`: valley crease
   * * `"F"`: flat (unfolded) crease
   * * `"U"`: unassigned/unknown crease
   * * `"C"`: cut/slit edge (should be treated as multiple `"B"` edges)
   * * `"J"`: join edge (incident faces should be treated as a single face)
   */
  edges_assignment?: Array<
    "B" | "M" | "V" | "F" | "U" | "C" | "J"
  >
  /** For each edge, the fold angle (deviation from flatness)
   * along each edge of the pattern.  The fold angle is a number in degrees
   * lying in the range [&minus;180, 180].  The fold angle is positive for
   * valley folds, negative for mountain folds, and zero for flat, unassigned,
   * and border folds.  Accordingly, the sign of `edge_foldAngle` should match
   * `edges_assignment` if both are specified.
   * *Renamed from `edges_foldAngles` in version 1.1.*
   */
  edges_foldAngle?: number[]
  /** For each edge, the length of the edge.
   * This is mainly useful for defining the intrinsic geometry of
   * abstract complexes where `vertices_coords` are unspecified;
   * otherwise, `edges_length` can be computed from `vertices_coords`.
   * *Renamed from `edges_lengths` in version 1.1.*
   */
  edges_length?: number[]

  /** For each face, an array of vertex IDs for the vertices
   * around the face *in counterclockwise order*.  This array can repeat the
   * same vertex multiple times (e.g., if the face has a "slit" in it).
   * **Recommended** in any frame having faces.
   */
  faces_vertices?: number[][]
  /** For each face, an array of edge IDs for the edges around
   * the face *in counterclockwise order*.  In addition to the matching cyclic
   * order, `faces_vertices` and `faces_edges` should align in start so that
   * `faces_edges[f][i]` is the edge connecting `faces_vertices[f][i]` and
   * `faces_vertices[f][(i+1)%d]` where `d` is the degree of face `f`.
   */
  faces_edges?: number[][]
  /** `faces_faces`: For each face, an array of face IDs for the faces *sharing
   * edges* around the face, possibly including `null`s.
   * If the frame is a manifold, the faces should be listed in counterclockwise
   * order and in the same linear order as `faces_edges` (if it is specified):
   * `f` and `faces_faces[f][i]` should be the faces incident to the edge
   * `faces_edges[f][i]`, unless that edge has no face on the other side,
   * in which case `faces_faces[f][i]` should be `null`.
   */
  faces_faces?: (number | null)[][]

  /** An array of triples `[f, g, s]` where `f` and `g` are face IDs
   * and `s` is an integer between &minus;1 and 1:
   * * +1 indicates that face `f` lies *above* face `g`,
   *   i.e., on the side pointed to by `g`'s normal vector in the folded state.
   * * &minus;1 indicates that face `f` lies *below* face `g`,
   *   i.e., on the side opposite `g`'s normal vector in the folded state.
   * * 0 indicates that `f` and `g` have unknown stacking order
   *   (e.g., they do not overlap in their interiors).
   *
   * **Recommended** for frames with interior-overlapping faces.
   */
  faceOrders?: [f: number, g: number, s: number][]
  /** An array of triples `[e, f, s]` where `e` and `f` are edge IDs
   * and `s` is an integer between &minus;1 and 1:
   * * +1 indicates that edge `e` lies locally on the *left* side of edge `f`
   *   (relative to edge `f`'s orientation given by `edges_vertices`)
   * * &minus;1 indicates that edge `e` lies locally on the *right* side of edge
   *   `f` (relative to edge `f`'s orientation given by `edges_vertices`)
   * * 0 indicates that `e` and `f` have unknown stacking order
   *   (e.g., they do not overlap in their interiors).
   *
   * This property makes sense only in 2D.
   * **Recommended** for linkage configurations with interior-overlapping edges.
   */
  edgeOrders?: [e: number, f: number, s: number][]

  // Nonstandard (not in spec) extensions used by the FOLD library
  faces_flatFoldTransform?: (number[][] | null)[]
  faces_flatUnfoldTransform?: (number[][] | null)[]
  faces_foldTransform?: (number[][] | null)[]
  vertices_foldCoords?: (number[] | null)[]
  faces_flatFoldOrientation?: (number | null)[]
  vertices_flatFoldCoords?: (number[] | null)[]
  vertices_flatUnfoldCoords?: Coords[]
  faces_flatUnfoldOrientation?: (number | null)[]

export interface Frame extends RootFrame
  /** Parent frame ID.  Intuitively, this frame (the child)
   * is a modification (or, in general, is related to) the parent frame.
   * This property is optional, but enables organizing frames into a tree
   * structure.
   */
  frame_parent?: number
  /** If true, any properties in the parent frame
   * (or recursively inherited from an ancestor) that is not overridden in
   * this frame are automatically inherited, allowing you to avoid duplicated
   * data in many cases.
   */
  frame_inherit?: boolean

export interface Fold extends FileMetadata, RootFrame
  file_frames?: Frame[]
